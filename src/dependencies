dependencies () {
  dependencies::check \
    || finish::failed

  [[ ${install_deps} == 1 ]] &&
    dependencies::install

  {
    [[ -z ${missing_dependencies} ]] \
      || [[ ${CMD} == "rm" ]]
  } \
    || {
      dot_err "depenencies are not satisfied.\ntry installing with -i"
      finish::failed
    }
}

dependencies::check () {
  # TODO add more package managers
  if exists pacman; then
    local -r \
      search_pkg_db="pacman -Q" \
      dependencies=YAOURT_DEPENDENCIES
  elif exists apt-get; then
    local -r\
      search_pkg_db="dpkg -l" \
      dependencies=APT_DEPENDENCIES
  else
    dot_err "your *nix is not supported"
    finish::failed
  fi

  local dep_check () {
    each 'dependencies::check::package $1' ${=${(P)dependencies}[$1]}
  }

  if (( ${flags[(I)all]} )); then
    # (P@k) == the keys of the associative array that dependencies points to
    eachf dep_check ${(P@k)dependencies}
  else
    eachf dep_check ${flags}
  fi
}

dependencies::check::package () {
  local -r \
    package=$1

  {
    ${=search_pkg_db} ${package} \
      || ${=search_pkg_db} ${package}-git
  } &> /dev/null \
    || {
      if [[ ${package} =~ 'antibody|hub' ]]; then
        exists ${package} \
          || {
            print -c -u2 "${package}" "is not installed"
            missing_dependencies+=${package}
          }
      else
        print -c -u2 "${package}" "is not installed"
        missing_dependencies+=${package}
      fi
    }
}

dependencies::install () {
  if [[ -z ${missing_dependencies} ]]; then
    print "all dependencies are already installed... continuing"
  else
    if exists yaourt; then
      yaourt -S ${missing_dependencies} --noconfirm --needed \
        && missing_dependencies=()
    elif exists pacman; then
      print "yaourt not detected; building it..."
      dependencies::install::yaourt \
        || {
            dot_err "yaourt failed to install; dependencies not installed"
            return 1
        }
      yaourt -S ${missing_dependencies} --noconfirm --needed \
        && missing_dependencies=()
    elif exists apt-get; then
      dependencies::install::ubuntu
      sudo apt-get install -y ${missing_dependencies} \
        && missing_dependencies=()
    else
      dot_err "installing dependecies is not support on your *nix"
    fi
  fi
}

dependencies::install::yaourt () {
  local -i value
  if
    {
      sudo pacman -S base-devel --needed --noconfirm \
        || sudo pacman -S multilib-devel --needed --noconfirm \
        && git clone https://aur.archlinux.org/package-query.git \
          ${TMPDIR}/package-query > /dev/null \
        && (
          cd ${TMPDIR}/package-query \
            || return 1 \
            && makepkg -si --noconfirm --needed \
        ) \
        && git clone https://aur.archlinux.org/yaourt.git \
          ${TMPDIR}/yaourt > /dev/null \
        && (
          cd ${TMPDIR}/yaourt \
            || return 1 \
            && makepkg -si --noconfirm --needed \
        )
    }
  then
    value=0
  else
    value=1
  fi

  return ${value}
}

dependencies::install::ubuntu () {
  if (( ${flags[(I)zsh]} )) || (( ${flags[(I)all]} )); then
    if (( ${missing_dependencies[(I)antibody]} )); then
      curl -sL https://git.io/antibody | bash -s \
      && missing_dependencies=(${(@)missing_dependencies:#antibody})
    fi

    if (( ${missing_dependencies[(I)hub]} )); then
      # download latest hub release
      curl -s -L https://github.com/github/hub/releases/latest \
        | egrep -o 'github/hub/releases/download/.*/hub-linux-amd64.*\.tgz' \
        | wget --base=http://github.com/ -i - -O ${TMPDIR}/hub.tgz

      #unpack and install
      (
        cd ${TMPDIR} || return 1
        tar xvfz ./hub.tgz
        sudo hub-linux-amd64*/install
      ) \
        || return 1

      missing_dependencies=(${(@)missing_dependencies:#hub})
    fi
  fi

  if (( ${flags[(I)neovim]} )) || (( ${flags[(I)all]} )); then
    if (( ${missing_dependencies[(I)neovim]} )); then
      sudo add-apt-repository -y ppa:neovim-ppa/unstable
      sudo apt-get -y update
      sudo apt-get install -y neovim python3-pip
      pip3 install --upgrade neovim
    fi
  fi

  if (( ${flags[(I)x11]} )) || (( ${flags[(I)all]} )); then
    if (( ${missing_dependencies[(I)qutebrowser]} )); then
      # download latest qutebrowser release
      curl -s -L https://github.com/qutebrowser/qutebrowser/releases/latest \
        | egrep -o 'qutebrowser/qutebrowser/releases/download/.*/.*\.deb' \
        | wget --base=http://github.com/ -i - -O ${TMPDIR}/qutebrowser.deb
      wget https://qutebrowser.org/python3-pypeg2_2.15.2-1_all.deb \
        -O ${TMPDIR}/python3-pypeg.deb

      sudo apt-get install -y ${TMPDIR}/python3-pypeg.deb
      sudo apt-get install -y ${TMPDIR}/qutebrowser.deb \
      && missing_dependencies=(${(@)missing_dependencies:#qutebrowser})
    fi
  fi
}
