dependencies () {
  dependencies::check

  (( ${FLAGS[(I)INSTALL]} )) &&
    dependencies::install

  {
    [[ -z ${missing_dependencies} ]] \
      || (( ${FLAGS[(I)UNINSTALL]} ))
  } \
    || {
      print -u2 "depenencies are not satisfied.\ntry installing with -i"
      exit 1
    }
}

dependencies::check () {
  # TODO add more package managers
  if exists pacman; then
    local -r \
      search_pkg_db="pacman -Q" \
      dependencies=YAOURT_DEPENDENCIES
  elif exists apt-get; then
    local -r\
      search_pkg_db="dpkg -l" \
      dependencies=APT_DEPENDENCIES
  else
    print -u2 "your *nix is not supported"
    exit 1
  fi

  if (( ${FLAGS[(I)ALL]} )); then
    for key in ${(P@k)dependencies}; do
      for package in ${=${(P)dependencies}[${key}]}; do
        dependencies::check::package ${package}
      done
    done
  else
    for flag in ${FLAGS[@]/(INSTALL|UNINSTALL)}; do
      for package in ${=${(P)dependencies}[${flag}]}; do
        dependencies::check::package ${package}
      done
    done
  fi
}

dependencies::check::package () {
  local -r \
    package=$1

  {
    ${=search_pkg_db} ${package} \
      || ${=search_pkg_db} ${package}-git
  } &> /dev/null \
    || {
      if [[ ${package} =~ 'antibody|hub' ]]; then
        exists ${package} \
          || {
            print -c -u2 "${package}" "is not installed"
            missing_dependencies+=${package}
          }
      else
        print -c -u2 "${package}" "is not installed"
        missing_dependencies+=${package}
      fi
    }
}

dependencies::install () {
  if [[ -z ${missing_dependencies} ]]; then
    print "all dependencies are already installed... continuing"
  else
    if exists yaourt; then
      yaourt -S ${missing_dependencies} --noconfirm --needed \
        && missing_dependencies=()
    elif exists pacman; then
      print "yaourt not detected; building it..."
      dependencies::install::yaourt \
        || {
            print -u2 "yaourt failed to install; dependencies not installed"
            return 1
        }
      yaourt -S ${missing_dependencies} --noconfirm --needed \
        && missing_dependencies=()
    elif exists apt-get; then
      dependencies::install::ubuntu
      sudo apt-get install -y ${missing_dependencies} \
        && missing_dependencies=()
    else
      print -u2 "installing dependecies is not support on your *nix"
    fi
  fi
}

dependencies::install::yaourt () {
  local -i value
  if
    {
      sudo pacman -S base-devel --needed --noconfirm \
        || sudo pacman -S multilib-devel --needed --noconfirm \
        && git clone https://aur.archlinux.org/package-query.git \
          /tmp/package-query > /dev/null \
        && (
          cd /tmp/package-query \
            || exit 1 \
            && makepkg -si --noconfirm --needed \
        ) \
        && git clone https://aur.archlinux.org/yaourt.git \
          /tmp/yaourt > /dev/null \
        && (
          cd /tmp/yaourt \
            || exit 1 \
            && makepkg -si --noconfirm --needed \
        )
    }
  then
    value=0
  else
    value=1
  fi

  return ${value}
}

dependencies::install::ubuntu () {
  (( ${FLAGS[(I)zsh]} )) || (( ${FLAGS[(I)ALL]} )) \
    && {
      (( ${missing_dependencies[(I)antibody]} )) \
        && curl -sL https://git.io/antibody | bash -s \
        && missing_dependencies=(${(@)missing_dependencies:#antibody})

      (( ${missing_dependencies[(I)hub]} )) \
        && {
          # download latest hub release
          curl -s -L https://github.com/github/hub/releases/latest \
            | egrep -o 'github/hub/releases/download/.*/hub-linux-amd64.*\.tgz' \
            | wget --base=http://github.com/ -i - -O /tmp/hub.tgz \

          (
            cd /tmp || exit 1
            tar xvfz ./hub.tgz
            sudo hub-linux-amd64*/install
          )

        } \
        && missing_dependencies=(${(@)missing_dependencies:#hub})
    }

  (( ${FLAGS[(I)neovim]} )) || (( ${FLAGS[(I)ALL]} )) \
    && {
      (( ${missing_dependencies[(I)neovim]} )) \
        && {
          sudo add-apt-repository -y ppa:neovim-ppa/unstable
          sudo apt-get -y update
          sudo apt-get install -y neovim python3-pip
          pip3 install --upgrade neovim
        }
    }

  (( ${FLAGS[(I)x11]} )) || (( ${FLAGS[(I)ALL]} )) \
    && {
      (( ${missing_dependencies[(I)qutebrowser]} )) \
        && {
          # download latest qutebrowser release
          curl -s -L https://github.com/qutebrowser/qutebrowser/releases/latest \
            | egrep -o 'qutebrowser/qutebrowser/releases/download/.*/.*\.deb' \
            | wget --base=http://github.com/ -i - -O /tmp/qutebrowser.deb
          wget https://qutebrowser.org/python3-pypeg2_2.15.2-1_all.deb \
            -O /tmp/python3-pypeg.deb

          sudo apt-get install -y /tmp/python3-pypeg.deb
          sudo apt-get install -y /tmp/qutebrowser.deb

        } \
        && missing_dependencies=(${(@)missing_dependencies:#qutebrowser})
    }
}
