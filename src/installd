installd::spinner () {
  while true; do
    for b in $BALL; do
      printf "  $@ $b\r"
      sleep 0.1
    done
  done
}

installd::symlink () {
  local symlink files
  files=$@

  for file in ${=files}; do
    # determine symlink location based on information in filepath
    case ${file} in
      */bin/*)
        symlink=${BINDIR}/${file:t}
        ;;
      */ghci/*)
        symlink=${HOME}/.ghc/${file:t}
        ;;
      */neovim/init.vim)
        # install vimrc and vim dir symlinks for convenience
        installd::symlink::link ${file} ${HOME}/.vimrc
        installd::symlink::link ${CONFIGDIR}/nvim ${HOME}/.vim

        # now set symlink as normal
        symlink=${CONFIGDIR}/nvim/${file:t}
        ;;
      */neovim/plugins)
        symlink=${CONFIGDIR}/nvim/${file:t}
        ;;
      */mpv.conf)
        symlink=${CONFIGDIR}/mpv/${file:t}
        ;;
      */xmonad/(auto|xmon)*)
        symlink=${HOME}/.xmonad/${file:t}
        ;;
      *)
        symlink=${HOME}/.${file:t}
        ;;
    esac

    installd::symlink::link ${file} ${symlink}
  done
}

installd::symlink::link () {
  local -r \
    file=$1 \
    symlink=$2

  ln -sT ${file} ${symlink} &> /dev/null \
    || if [[ ${file} != ${symlink:A} ]]; then
      existing_dotfiles+=1
      dot_err "${symlink} exists:"
      dot_err "  and doesn't point to ${file}"
    fi
}

installd::symlink::fail () {
  local -r \
    current=$1

  if [[ ${existing_dotfiles} != 0 ]]; then
    kill %%

    printf "\n"
    dot_err "${current} dotfiles failed to install:"
    dot_err "  will not overwrite existing files"
    printf "\n"
    return 1
  fi
}

installd::all () {
  installd::zsh
  installd::tmux
  installd::ghci
  installd::neovim
  installd::x11
}

installd::zsh () {
  local -i existing_dotfiles

  if [[ ${CMD} == "ln" ]]; then
    installd::spinner "zsh   " &

    installd::symlink ${ZSHDIR}/*

    installd::symlink::fail "zsh" \
      || return 1

    # create sourable plugins file
    if ! [[ -a ${HOME}/.zsh/plugins.zsh ]]; then
      antibody bundle < ${ZSHDIR}/zsh/plugins \
        | sort \
        | sed '/pure.plugin/ { H; d; }; $ { p; x; }' \
        | sed '/zsh-syntax/ { H; d; }; $ { p; x; }' \
        | sed '/zsh-history/ { H; d; }; $ { p; x; }' \
        | sed '/zsh-vim-mode/ { H; d; }; $ { p; x; }' \
        > ${ZSHDIR}/zsh/plugins.zsh

      printf "$(antibody init)\n$(<${ZSHDIR}/zsh/plugins.zsh)" \
        > ${ZSHDIR}/zsh/plugins.zsh

      for stat in ${pipestatus}; do
        if [[ ${stat} != 0 ]]; then
          kill %%
          dot_err "\nzsh dotfiles failed to install:"
          dot_err "  plugins failed to download, check your connection"
          return 1
        fi
      done

      # initialize submodule for dircolors-solarized
      (
        cd ${HOME}/.cache/antibody/*zsh-dircolors-solarized \
          || return 1 \
          && git submodule init \
          && git submodule update \
          || {
            kill %%
            dot_err "zsh dotfiles failed to install:"
            dot_err "  zsh dircolors failed to install"
            return 1
          }
      )

    # create dircolors file
      zsh -ic "setupsolarized dircolors.ansi-dark"
    fi &> /dev/null

    # install fzf
    if ! [[ -a ${HOME}/.fzf.zsh ]]; then
      git clone https://github.com/junegunn/fzf ${HOME}/.fzf
      ${HOME}/.fzf/install --all
    fi &> /dev/null

    # change XDG_CONFIG_HOME if using a different value
    if [[ ${CONFIGDIR} != ${HOME}/.config ]]; then
      sed \
        -i "s/^XDG_CONFIG_HOME=*$/XDG_CONFIG_HOME=${CONFIGDIR}/" \
        ${ZSHDIR}/zprofile
    fi

    kill %%
    printf "  zsh    done${GREEN} ✓  ${COLOR_OFF}\n"
  else
    # unistall flag
    printf "  zsh    done${RED} ✘  ${COLOR_OFF}\n"
    rm -f    ${HOME}/.zshrc
    rm -f    ${HOME}/.zprofile
    rm -f    ${HOME}/.zsh
    rm -f    ${HOME}/.zsh-dircolors.config
    rm -f    ${HOME}/.fzf.zsh
    rm -f    ${HOME}/.fzf.bash
    rm -f    ${ZSHDIR}/zsh/plugins.zsh
    rm -rf   ${HOME}/.fzf
    rm -rf   ${HOME}/.cache/antibody
  fi
}

installd::tmux () {
  local -i existing_dotfiles

  if [[ ${CMD} == "ln" ]]; then

    # create needed dir
    mkdir -p ${BINDIR}
    installd::spinner "tmux  " &

    installd::symlink ${TMUXDIR}/^bin ${TMUXDIR}/bin/*

    installd::symlink::fail "tmux" \
      || return 1

    # install tmux plugin manager and run script to install plugins
    if ! [[ -a ${HOME}/.tmux/plugins/tpm ]];then
      git clone https://github.com/tmux-plugins/tpm \
        ${HOME}/.tmux/plugins/tpm \
        && ${HOME}/.tmux/plugins/tpm/bin/install_plugins \
        || {
          kill %%
          dot_err "tmux plugins failed to download"
          return 1
        }
    fi &> /dev/null

    kill %%
    printf "  tmux   done${GREEN} ✓  ${COLOR_OFF}\n"
  else
    # uninstall when UNINSTALL is passed
    printf "  tmux   done${RED} ✘  ${COLOR_OFF}\n"
    rm -f    ${HOME}/.tmux.conf
    rm -f    ${HOME}/.tmuxline.conf
    rm -f    ${BINDIR}/ipaddr
    rm -f    ${BINDIR}/batent
    rm -rf   ${HOME}/.tmux
  fi
}

installd::ghci () {
  local -i existing_dotfiles

  if [[ ${CMD} == "ln" ]]; then
    # create needed dirs
    mkdir -p ${HOME}/.ghc

    installd::spinner "ghci  " &

    installd::symlink ${GHCIDIR}/*

    installd::symlink::fail "ghci" \
      || return 1

    {
      stack setup
      stack ghc --package pretty-show --package hscolour
    } &> /dev/null

    kill %%
    printf "  ghci   done${GREEN} ✓  ${COLOR_OFF}\n"
  else
    # uninstall
    printf "  ghci   done${RED} ✘  ${COLOR_OFF}\n"
    rm -f    ${HOME}/.ghc/ghci.extra.hs
    rm -f    ${HOME}/.ghc/ghci
  fi
}

installd::neovim () {
  local dein
  dein=https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh
  readonly dein

  local -i existing_dotfiles

  if [[ ${CMD} == "ln" ]]; then
    # create needed dirs
    mkdir -p ${CONFIGDIR}/nvim
    mkdir -p ${BINDIR}

    installd::spinner "neovim" &

    installd::symlink ${NVIMDIR}/*

    installd::symlink::fail "neovim" \
      || return 1

    # install dein plugin manager
    [[ -a ${CONFIGDIR}/nvim/dein ]] \
      || {
        curl ${dein} > ${TMPDIR}/installer.sh
        sh ${TMPDIR}/installer.sh ${CONFIGDIR}/nvim/dein
      } &> /dev/null \
        || {
          kill %%
          dot_err "dein failed to install"
          return 1
        }

    # load nvim and install plugins; if clause in vimrc will install missing
      nvim --headless +qall 2> /dev/null \
        || {
          kill %%
          dot_err "dein plugins failed to download"
          return 1
        }

    kill %%
    printf "  neovim done${GREEN} ✓  ${COLOR_OFF}\n"
  else
    # uninstall when UNINSTALL is passed
    printf "  neovim done${RED} ✘  ${COLOR_OFF}\n"
    rm -f    ${HOME}/.vimrc
    rm -f    ${HOME}/.vim
    rm -rf   ${CONFIGDIR}/nvim
  fi
}

installd::x11 () {
  local -i existing_dotfiles

  if [[ ${CMD} == "ln" ]]; then
      # create needed dirs
      mkdir -p ${HOME}/.xmonad
      mkdir -p ${HOME}/shots
      mkdir -p ${BINDIR}
      mkdir -p ${CONFIGDIR}/mpv

      installd::spinner "x11   " &

      installd::symlink ${X11DIR}/bin/* ${X11DIR}/^bin

      installd::symlink::fail "x11" \
        || return 1

      exists dzvol \
        || {
          git clone https://github.com/allevaton/dzvol ${TMPDIR}/dzvol
          (
            cd ${TMPDIR}/dzvol \
              || return 1

            make
            mv dzvol ${BINDIR}/dzvol
          )
        } &> /dev/null \
          || {
            kill %%
            dot_err "dzvol failed to install"
            return 1
        }

        # imgur upload script
        exists imgur.sh \
          || {
            git clone https://github.com/tremby/imgur.sh ${TMPDIR}/imgur
            mv ${TMPDIR}/imgur/imgur.sh ${BINDIR}
          } &> /dev/null \
            || {
              kill %%
              dot_err "imgur.sh failed to install"
              return 1
            }
        exists png2ff \
          || {
            (
              cd ${TMPDIR}
              tar -xJf ${DISTDIR}/dist/farbfeld-3.tar.xz
              cd farbfeld-3
              sudo make install
            )
          }


    kill %%
    printf "  x11    done${GREEN} ✓  ${COLOR_OFF}\n"
  else
    # uninstall when UNINSTALL is passed
    printf "  x11    done${RED} ✘  ${COLOR_OFF}\n"
    rm -f    ${BINDIR}/dzvol
    rm -f    ${BINDIR}/stoggle
    rm -f    ${BINDIR}/autostart
    rm -f    ${HOME}/.xinitrc
    rm -f    ${BINDIR}/imgur.sh
    rm -rf   ${CONFIGDIR}/mpv
    rm -rf   ${HOME}/.xmonad
  fi
}

installd () {
  local -r \
    RED='\033[0;31m' \
    GREEN='\033[0;32m' \
    COLOR_OFF='\033[0m'
    BALL=(" ●    " "  ●   " "   ●  " "    ● " "     ●" \
        "    ● " "   ●  " "  ●   " " ●    " "●     ")

  if [[ ${all} == 1 ]]; then
    installd::symlink::link ${SCRIPTDIR}/doi ${BINDIR}/doi
    installd::all
  else
    installd::symlink::link ${SCRIPTDIR}/doi ${BINDIR}/doi
    for flag in ${flags}; do
      if [[ ${flag} != "install_deps" ]] && [[ ${(P)flag} == 1 ]]; then
        installd::${flag}
      fi
    done
  fi
}
